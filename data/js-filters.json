{
  "name": "2024-5-26 20:15:56 JavaScript filter problems",
  "data": [
    {
      "prob_id": 1,
      "prob_type": 1,
      "prob_name": "Filters.....................",
      "prob_problem": "function sumOfNumbers(numbers) {\r    return numbers.filter((num) => num % 2 === 0);\r\n}",
      "prob_args": [
        4,
        10,
        2,
        3,
        44,
        1,
        5,
        9,
        7,
        8,
        6,
        1
      ],
      "prob_solution": [
        4,
        10,
        2,
        44,
        8,
        6
      ],
      "prob_resultType": "array",
      "prob_instructions": [
        "Sum of Numbers",
        "Take the values in **numbers array** and add them up. Return sum result."
      ],
      "prob_hints": [
        "Syntax: for (initialization; condition; iteration) {"
      ]
    },
    {
      "prob_id": 2,
      "prob_type": 1,
      "prob_name": "Add 10 Map Method",
      "prob_problem": "function addTenToNumbers(numbers) {\r    return numbers.map(item => {\r\n        return item + 10;\r\n    })\r\n}",
      "prob_args": [
        4,
        10,
        2,
        3,
        44,
        1,
        5,
        9,
        7,
        8,
        6,
        1
      ],
      "prob_solution": [
        14,
        20,
        12,
        13,
        54,
        11,
        15,
        19,
        17,
        18,
        16,
        11
      ],
      "prob_resultType": "array",
      "prob_instructions": [
        "map Loop - Adds ten to each number in an array.",
        "return: An array of numbers where each number has been increased by ten.",
        "try not to use an extra array as a bucket"
      ],
      "prob_hints": [
        "Syntax: array.map(callback(currentValue[, index[, array]])[, thisArg])",
        "it returns a NEW array -  It's a higher-order function that takes a callback function as an argument and returns a new array.",
        "The map method creates a new array with the results of calling a provided function on every element in the array. It's useful when you want to transform the elements of an array."
      ]
    },
    {
      "prob_id": 3,
      "prob_type": 1,
      "prob_name": "Filter \"top\"",
      "prob_problem": "function getTopWords(words) {\r    return words.filter(word => word.substring(0,3) === \"top\" );\r\n}",
      "prob_args": [
        "toper",
        "tophe",
        "topqhs",
        "tuesday",
        "topis",
        "toped",
        "tree",
        "topfes",
        "tophi",
        "tophilopu",
        "dang",
        "togo",
        "topic",
        "topoi"
      ],
      "prob_solution": [
        "toper",
        "tophe",
        "topqhs",
        "topis",
        "toped",
        "topfes",
        "tophi",
        "tophilopu",
        "topic",
        "topoi"
      ],
      "prob_resultType": "array",
      "prob_instructions": [
        "filter Loop - get words that start with \"top\". return array",
        "do not use an extra array as a bucket"
      ],
      "prob_hints": [
        "Syntax: array.filter(callback(element[, index[, array]])[, thisArg])",
        "...kinda like map....",
        "substring(start, end) - end is excluded",
        "The filter method creates a new array with all elements that pass the test implemented by the provided function. It's useful for filtering out elements based on a condition."
      ]
    },
    {
      "prob_id": 4,
      "prob_type": 1,
      "prob_name": "Get Filter Inventors",
      "prob_problem": "function getInventors(inventors) {\r    return inventors.filter(inventor => (inventor.year >= 1500 && inventor.year <= 1599));\r\n}",
      "prob_args": [
        {
          "first": "Albert",
          "last": "Einstein",
          "year": 1879,
          "passed": 1955
        },
        {
          "first": "Isaac",
          "last": "Newton",
          "year": 1643,
          "passed": 1727
        },
        {
          "first": "Galileo",
          "last": "Galilei",
          "year": 1564,
          "passed": 1642
        },
        {
          "first": "Marie",
          "last": "Curie",
          "year": 1867,
          "passed": 1934
        },
        {
          "first": "Johannes",
          "last": "Kepler",
          "year": 1571,
          "passed": 1630
        },
        {
          "first": "Nicolaus",
          "last": "Copernicus",
          "year": 1473,
          "passed": 1543
        },
        {
          "first": "Max",
          "last": "Planck",
          "year": 1858,
          "passed": 1947
        },
        {
          "first": "Katherine",
          "last": "Blodgett",
          "year": 1898,
          "passed": 1979
        },
        {
          "first": "Ada",
          "last": "Lovelace",
          "year": 1815,
          "passed": 1852
        },
        {
          "first": "Sarah E.",
          "last": "Goode",
          "year": 1855,
          "passed": 1905
        },
        {
          "first": "Lise",
          "last": "Meitner",
          "year": 1878,
          "passed": 1968
        },
        {
          "first": "Hanna",
          "last": "Hammarström",
          "year": 1829,
          "passed": 1909
        }
      ],
      "prob_solution": [
        {
          "first": "Galileo",
          "last": "Galilei",
          "year": 1564,
          "passed": 1642
        },
        {
          "first": "Johannes",
          "last": "Kepler",
          "year": 1571,
          "passed": 1630
        }
      ],
      "prob_resultType": "object",
      "prob_instructions": [
        "filter Loop -  Filters an array of inventors to return only those who lived between the years 1500 and 1599.",
        "return: An array of inventor objects who lived between the years 1500 and 1599."
      ],
      "prob_hints": [
        "Syntax: array.filter(callback(element[, index[, array]])[, thisArg])",
        "The filter method creates a new array with all elements that pass the test implemented by the provided function. It's useful for filtering out elements based on a condition."
      ]
    },
    {
      "prob_id": 5,
      "prob_type": 1,
      "prob_name": "Get All Inventors Full names",
      "prob_problem": "function getInventorsFullname(inventors) {\r    return inventors.map((inventor) => `${inventor.first} ${inventor.last}`);\r\n}",
      "prob_args": [
        {
          "first": "Albert",
          "last": "Einstein",
          "year": 1879,
          "passed": 1955
        },
        {
          "first": "Isaac",
          "last": "Newton",
          "year": 1643,
          "passed": 1727
        },
        {
          "first": "Galileo",
          "last": "Galilei",
          "year": 1564,
          "passed": 1642
        },
        {
          "first": "Marie",
          "last": "Curie",
          "year": 1867,
          "passed": 1934
        },
        {
          "first": "Johannes",
          "last": "Kepler",
          "year": 1571,
          "passed": 1630
        },
        {
          "first": "Nicolaus",
          "last": "Copernicus",
          "year": 1473,
          "passed": 1543
        },
        {
          "first": "Max",
          "last": "Planck",
          "year": 1858,
          "passed": 1947
        },
        {
          "first": "Katherine",
          "last": "Blodgett",
          "year": 1898,
          "passed": 1979
        },
        {
          "first": "Ada",
          "last": "Lovelace",
          "year": 1815,
          "passed": 1852
        },
        {
          "first": "Sarah E.",
          "last": "Goode",
          "year": 1855,
          "passed": 1905
        },
        {
          "first": "Lise",
          "last": "Meitner",
          "year": 1878,
          "passed": 1968
        },
        {
          "first": "Hanna",
          "last": "Hammarström",
          "year": 1829,
          "passed": 1909
        }
      ],
      "prob_solution": [
        "Albert Einstein",
        "Isaac Newton",
        "Galileo Galilei",
        "Marie Curie",
        "Johannes Kepler",
        "Nicolaus Copernicus",
        "Max Planck",
        "Katherine Blodgett",
        "Ada Lovelace",
        "Sarah E. Goode",
        "Lise Meitner",
        "Hanna Hammarström"
      ],
      "prob_resultType": "array",
      "prob_instructions": [
        "filter Loop - Maps over an array of inventor objects and returns a new array containing full names of the inventors.",
        "Each inventor object is expected to have `first` and `last` properties representing the inventor's first and last names.",
        "return: A new array of strings, where each string is the full name of an inventor."
      ],
      "prob_hints": [
        "Syntax: array.map(callback(currentValue[, index[, array]])[, thisArg])",
        "Concat with + \" \" + or use backticks '"
      ]
    },
    {
      "prob_id": 6,
      "prob_type": 1,
      "prob_name": "Reduce Method",
      "prob_problem": "function reduceLoop(numbers) {\r    return numbers.reduce((acc, curVal) => acc + curVal, 101);\r\n}",
      "prob_args": [
        4,
        10,
        2,
        3,
        44,
        1,
        5,
        9,
        7,
        8,
        6,
        1
      ],
      "prob_solution": 201,
      "prob_resultType": "number",
      "prob_instructions": [
        "reduce Loop - sum all array **numbers**, but start with 101 in the bucket. return result",
        "Result: The sum of the accumulator (initially 101) and all numbers in the array."
      ],
      "prob_hints": [
        "Syntax: array.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue]);\n            array.reduce((acc, curValue) => acc + num, 0);",
        "Always returns a single value",
        "The reduce method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single output value. It's useful for accumulating values or transforming the array into a single value."
      ]
    },
    {
      "prob_id": 7,
      "prob_type": 1,
      "prob_name": "Get even",
      "prob_problem": "function getEvenNumbers(numbers) {\r    return numbers.filter((num) => num % 2 === 0);\r\n}",
      "prob_args": [
        4,
        10,
        2,
        3,
        44,
        1,
        5,
        9,
        7,
        8,
        6,
        1
      ],
      "prob_solution": [
        4,
        10,
        2,
        44,
        8,
        6
      ],
      "prob_resultType": "array",
      "prob_instructions": [
        "Get the even numbers from the reduce Loop - sum all array numbers, but start with 101 in the bucket. return result",
        "do not use an extra array as a bucket"
      ],
      "prob_hints": [
        "Syntax: array.filter(callback(element[, index[, array]])[, thisArg])"
      ]
    },
    {
      "prob_id": 8,
      "prob_type": 1,
      "prob_name": "Triple Numbers",
      "prob_problem": "function tripleNumbers(numbers) {\r    return numbers.map((num) => num * 3);\r\n}",
      "prob_args": [
        4,
        10,
        2,
        3,
        44,
        1,
        5,
        9,
        7,
        8,
        6,
        1
      ],
      "prob_solution": [
        12,
        30,
        6,
        9,
        132,
        3,
        15,
        27,
        21,
        24,
        18,
        3
      ],
      "prob_resultType": "array",
      "prob_instructions": [
        "Triples each number in an array.",
        "Result:  An array of numbers where each number has been multiplied by three."
      ],
      "prob_hints": [
        "Syntax: array.map(callback(currentValue[, index[, array]])[, thisArg])"
      ]
    },
    {
      "prob_id": 9,
      "prob_type": 1,
      "prob_name": "Sum Numbers",
      "prob_problem": "function sumNumbers(numbers) {\r    return numbers.reduce((acc, curVal) => acc + curVal);\r\n\r\n}",
      "prob_args": [
        4,
        10,
        2,
        3,
        44,
        1,
        5,
        9,
        7,
        8,
        6,
        1
      ],
      "prob_solution": 100,
      "prob_resultType": "number",
      "prob_instructions": [
        "Sums up all numbers in an array.",
        "return: The sum of all numbers in the array.",
        "do not use an extra array as a bucket"
      ],
      "prob_hints": [
        "Syntax: array.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue]);\n            array.reduce((acc, curValue) => acc + num, 0);"
      ]
    },
    {
      "prob_id": 10,
      "prob_type": 1,
      "prob_name": "Get Even-Triple-Sum Numbers",
      "prob_problem": "function sumOfTripledEvens(numbers) {\r    const evens = numbers.filter((num) => num % 2 === 0);\r\n    const trippled = evens.map((num) => num * 3);\r\n    const sum = trippled.reduce((acc, curVal) => acc + curVal);\r\n    return sum;\r\n}",
      "prob_args": [
        4,
        10,
        2,
        3,
        44,
        1,
        5,
        9,
        7,
        8,
        6,
        1
      ],
      "prob_solution": 222,
      "prob_resultType": "number",
      "prob_instructions": [
        "Calculates the sum of all even numbers in an array, after tripling each of them.",
        "Result: The sum of all tripled even numbers in the array.",
        "do not use an extra array as a bucket"
      ],
      "prob_hints": [
        "Syntax: array.filter(callback(element[, index[, array]])[, thisArg])",
        "Syntax: array.map(callback(currentValue[, index[, array]])[, thisArg])",
        "Syntax: array.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue]);\n            array.reduce((acc, curValue) => acc + num, 0);"
      ]
    }
  ]
}