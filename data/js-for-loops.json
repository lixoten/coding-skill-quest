{
  "name": "JavaScript for loops",
  "data": [
    {
      "id": 1,
      "instructions": [
        "for..Of Loop - get length of each string. return a number \"array\""
      ],
      "hints": [
        "Hint: 1111 for (_____of arr) {",
        "Hint: 2222 The for...of loop is a more modern and concise way to iterate over the elements of an array. It's particularly useful when you don't need to know the index of the current element.",
        "hint 33333333333333333333333333333",
        "hint 4444444444444"
      ],
      "problem": "function forOfLoop(arr) {\r    const outArr = [];\r\n    for (const temp of arr) {\r\n        outArr.push(temp.length);\r\n    }\r\n\r\n    return outArr;\r\n}",
      "arguments": [
        "red",
        "orange",
        "yellow",
        "green",
        "blue",
        "indigo",
        "violet"
      ],
      "solution": [
        3,
        6,
        6,
        5,
        4,
        6,
        6
      ]
    },
    {
      "id": 2,
      "instructions": [
        "For Loop - add 5 to each number in array. return \"array\" with new values"
      ],
      "hints": [
        "Hint: The traditional for loop is useful when you know the exact number of iterations you need to perform. It's straightforward and easy to understand."
      ],
      "problem": "function forLoop(arr) {\r    const outArr = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        outArr.push(arr[i] + 5)\r\n    }\r\n    return outArr;\r\n}",
      "arguments": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "solution": [
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15
      ]
    },
    {
      "id": 3,
      "instructions": [
        "Sum of Numbers",
        "Use a for loop. Write a JavaScript function that takes an array of numbers as input and returns the sum of all the numbers in the array."
      ],
      "hints": [],
      "problem": "function sumOfNumbers(numbers) {\r    let sum = 0;\r\n    for (let i = 0; i < numbers.length; i++) {\r\n        sum += numbers[i];\r\n    }\r\n    return sum;\r\n}",
      "arguments": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "solution": 55
    },
    {
      "id": 4,
      "instructions": [
        "Finding the Largest Number",
        "Use For loop - Write a JavaScript function that takes an array of numbers as input and returns the largest number in the array."
      ],
      "hints": [],
      "problem": "function findLargestNumber(numbers) {\r    let largest = numbers[0];\r\n    for (let i = 1; i < numbers.length; i++) {\r\n        if (numbers[i] > largest) {\r\n            largest = numbers[i];\r\n        }\r\n    }\r\n    return largest;\r\n}",
      "arguments": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "solution": 10
    },
    {
      "id": 5,
      "instructions": [
        "Counting Characters",
        "Write a JavaScript function that takes a string as input and returns the count of each character in the string."
      ],
      "hints": [],
      "problem": "function countCharacters(str) {\r    let charCount = {};\r\n    for (let i = 0; i < str.length; i++) {\r\n        let char = str[i];\r\n        if (charCount[char]) {\r\n            charCount[char]++;\r\n        } else {\r\n            charCount[char] = 1;\r\n        }\r\n    }\r\n    return charCount;\r\n}",
      "arguments": "hello world",
      "solution": {
        "h": 1,
        "e": 1,
        "l": 3,
        "o": 2,
        " ": 1,
        "w": 1,
        "r": 1,
        "d": 1
      }
    },
    {
      "id": 6,
      "instructions": [
        "ForEach Loop - change to uppercase each string in array. return a \"array\""
      ],
      "hints": [
        "Hint: The forEach method is a higher-order function provided by JavaScript arrays. It executes a provided function once for each array element. It's a good choice when you want to perform an operation on each element of the array without needing to know the index."
      ],
      "problem": "function forEachLoop(arr) {\r    const outArr = []\r\n    arr.forEach(item => {\r\n        outArr.push(item.toUpperCase())\r\n    });\r\n\r\n    return outArr;\r\n}",
      "arguments": [
        "red",
        "orange",
        "yellow",
        "green",
        "blue",
        "indigo",
        "violet"
      ],
      "solution": [
        "RED",
        "ORANGE",
        "YELLOW",
        "GREEN",
        "BLUE",
        "INDIGO",
        "VIOLET"
      ]
    },
    {
      "id": 7,
      "instructions": [
        "map Loop - add 10 to each number. return \"array\"",
        "do not use an extra array as a bucket"
      ],
      "hints": [
        "Hint: .....rn arr.map(.....",
        "Hint: it returns a NEW array -  It's a higher-order function that takes a callback function as an argument and returns a new array.",
        "Hint: The map method creates a new array with the results of calling a provided function on every element in the array. It's useful when you want to transform the elements of an array."
      ],
      "problem": "function mapLoop(arr) {\r    return arr.map(item => {\r\n        return item + 10;\r\n    })\r\n}",
      "arguments": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "solution": [
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ]
    },
    {
      "id": 8,
      "instructions": [
        "filter Loop - get words that start with \"top\". return array",
        "do not use an extra array as a bucket"
      ],
      "hints": [
        "Hint: ...kinda like map....",
        "Hint: substring(start, end) - end is excluded",
        "Hint: The filter method creates a new array with all elements that pass the test implemented by the provided function. It's useful for filtering out elements based on a condition."
      ],
      "problem": "function filterLoop(arr) {\r    return arr.filter(word => word.substring(0,3) === \"top\" );\r\n}",
      "arguments": [
        "toper",
        "tophe",
        "tophs",
        "tuesday",
        "topis",
        "toped",
        "tree",
        "topes",
        "tophi",
        "togo",
        "topic",
        "topoi"
      ],
      "solution": [
        "toper",
        "tophe",
        "tophs",
        "topis",
        "toped",
        "topes",
        "tophi",
        "topic",
        "topoi"
      ]
    },
    {
      "id": 9,
      "instructions": [
        "reduce Loop - sum all array items, but start with 101 in the bucket. return result",
        "do not use an extra array as a bucket"
      ],
      "hints": [
        "Hint: syntax: array.reduce(callback( accumulator, currentValue[, index[, array]] )[, initialValue])",
        "Hint: The reduce method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single output value. It's useful for accumulating values or transforming the array into a single value."
      ],
      "problem": "function reduceLoop(arr) {\r    return arr.reduce((acc, curVal) => acc + curVal, 101);\r\n}",
      "arguments": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "solution": 156
    },
    {
      "id": 10,
      "instructions": [
        "return the string \"Hello World!\";"
      ],
      "hints": [
        "Hint: REALLLY? do you reallyy need a hint? WTH!!!!"
      ],
      "problem": "function helloWorld() {\r    return \"Hello World!\";\r\n}",
      "arguments": "",
      "solution": "Hello World!"
    }
  ]
}